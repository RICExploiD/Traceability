//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Traceability.OperatorLoginService {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IOperatorLogin", Namespace="http://tempuri.org/")]
    public partial class BasicHttpBinding_IOperatorLogin : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback StartSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartSessionWeldingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStationStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasAccessOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BasicHttpBinding_IOperatorLogin() {
            this.Url = global::Traceability.Properties.Settings.Default.WM_Traceability21_OperatorLoginService_OperatorLogin;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event StartSessionCompletedEventHandler StartSessionCompleted;
        
        /// <remarks/>
        public event StartSessionWeldingsCompletedEventHandler StartSessionWeldingsCompleted;
        
        /// <remarks/>
        public event CloseSessionCompletedEventHandler CloseSessionCompleted;
        
        /// <remarks/>
        public event GetStationStatusCompletedEventHandler GetStationStatusCompleted;
        
        /// <remarks/>
        public event GetUserStatusCompletedEventHandler GetUserStatusCompleted;
        
        /// <remarks/>
        public event HasAccessCompletedEventHandler HasAccessCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/StartSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StartSession(int Line, [System.Xml.Serialization.XmlIgnoreAttribute()] bool LineSpecified, int StationNumber, [System.Xml.Serialization.XmlIgnoreAttribute()] bool StationNumberSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string OperatorBR) {
            object[] results = this.Invoke("StartSession", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified,
                        OperatorBR});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartSessionAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, string OperatorBR) {
            this.StartSessionAsync(Line, LineSpecified, StationNumber, StationNumberSpecified, OperatorBR, null);
        }
        
        /// <remarks/>
        public void StartSessionAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, string OperatorBR, object userState) {
            if ((this.StartSessionOperationCompleted == null)) {
                this.StartSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartSessionOperationCompleted);
            }
            this.InvokeAsync("StartSession", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified,
                        OperatorBR}, this.StartSessionOperationCompleted, userState);
        }
        
        private void OnStartSessionOperationCompleted(object arg) {
            if ((this.StartSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartSessionCompleted(this, new StartSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/StartSessionWeldings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StartSessionWeldings(int Line, [System.Xml.Serialization.XmlIgnoreAttribute()] bool LineSpecified, int StationNumber, [System.Xml.Serialization.XmlIgnoreAttribute()] bool StationNumberSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string OperatorBR, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string WeldingPoints) {
            object[] results = this.Invoke("StartSessionWeldings", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified,
                        OperatorBR,
                        WeldingPoints});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartSessionWeldingsAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, string OperatorBR, string WeldingPoints) {
            this.StartSessionWeldingsAsync(Line, LineSpecified, StationNumber, StationNumberSpecified, OperatorBR, WeldingPoints, null);
        }
        
        /// <remarks/>
        public void StartSessionWeldingsAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, string OperatorBR, string WeldingPoints, object userState) {
            if ((this.StartSessionWeldingsOperationCompleted == null)) {
                this.StartSessionWeldingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartSessionWeldingsOperationCompleted);
            }
            this.InvokeAsync("StartSessionWeldings", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified,
                        OperatorBR,
                        WeldingPoints}, this.StartSessionWeldingsOperationCompleted, userState);
        }
        
        private void OnStartSessionWeldingsOperationCompleted(object arg) {
            if ((this.StartSessionWeldingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartSessionWeldingsCompleted(this, new StartSessionWeldingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/CloseSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CloseSession(int Line, [System.Xml.Serialization.XmlIgnoreAttribute()] bool LineSpecified, int StationNumber, [System.Xml.Serialization.XmlIgnoreAttribute()] bool StationNumberSpecified) {
            object[] results = this.Invoke("CloseSession", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CloseSessionAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified) {
            this.CloseSessionAsync(Line, LineSpecified, StationNumber, StationNumberSpecified, null);
        }
        
        /// <remarks/>
        public void CloseSessionAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, object userState) {
            if ((this.CloseSessionOperationCompleted == null)) {
                this.CloseSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseSessionOperationCompleted);
            }
            this.InvokeAsync("CloseSession", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified}, this.CloseSessionOperationCompleted, userState);
        }
        
        private void OnCloseSessionOperationCompleted(object arg) {
            if ((this.CloseSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseSessionCompleted(this, new CloseSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/GetStationStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public StationInfo GetStationStatus(int Line, [System.Xml.Serialization.XmlIgnoreAttribute()] bool LineSpecified, int StationNumber, [System.Xml.Serialization.XmlIgnoreAttribute()] bool StationNumberSpecified) {
            object[] results = this.Invoke("GetStationStatus", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified});
            return ((StationInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetStationStatusAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified) {
            this.GetStationStatusAsync(Line, LineSpecified, StationNumber, StationNumberSpecified, null);
        }
        
        /// <remarks/>
        public void GetStationStatusAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, object userState) {
            if ((this.GetStationStatusOperationCompleted == null)) {
                this.GetStationStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStationStatusOperationCompleted);
            }
            this.InvokeAsync("GetStationStatus", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified}, this.GetStationStatusOperationCompleted, userState);
        }
        
        private void OnGetStationStatusOperationCompleted(object arg) {
            if ((this.GetStationStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStationStatusCompleted(this, new GetStationStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/GetUserStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public StationInfo GetUserStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string OperatorBR) {
            object[] results = this.Invoke("GetUserStatus", new object[] {
                        OperatorBR});
            return ((StationInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserStatusAsync(string OperatorBR) {
            this.GetUserStatusAsync(OperatorBR, null);
        }
        
        /// <remarks/>
        public void GetUserStatusAsync(string OperatorBR, object userState) {
            if ((this.GetUserStatusOperationCompleted == null)) {
                this.GetUserStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserStatusOperationCompleted);
            }
            this.InvokeAsync("GetUserStatus", new object[] {
                        OperatorBR}, this.GetUserStatusOperationCompleted, userState);
        }
        
        private void OnGetUserStatusOperationCompleted(object arg) {
            if ((this.GetUserStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserStatusCompleted(this, new GetUserStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/HasAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HasAccess(int line, [System.Xml.Serialization.XmlIgnoreAttribute()] bool lineSpecified, int station, [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string operatorBR) {
            object[] results = this.Invoke("HasAccess", new object[] {
                        line,
                        lineSpecified,
                        station,
                        stationSpecified,
                        operatorBR});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HasAccessAsync(int line, bool lineSpecified, int station, bool stationSpecified, string operatorBR) {
            this.HasAccessAsync(line, lineSpecified, station, stationSpecified, operatorBR, null);
        }
        
        /// <remarks/>
        public void HasAccessAsync(int line, bool lineSpecified, int station, bool stationSpecified, string operatorBR, object userState) {
            if ((this.HasAccessOperationCompleted == null)) {
                this.HasAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasAccessOperationCompleted);
            }
            this.InvokeAsync("HasAccess", new object[] {
                        line,
                        lineSpecified,
                        station,
                        stationSpecified,
                        operatorBR}, this.HasAccessOperationCompleted, userState);
        }
        
        private void OnHasAccessOperationCompleted(object arg) {
            if ((this.HasAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasAccessCompleted(this, new HasAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpsBinding_IOperatorLogin", Namespace="http://tempuri.org/")]
    public partial class BasicHttpsBinding_IOperatorLogin : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback StartSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartSessionWeldingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStationStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasAccessOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BasicHttpsBinding_IOperatorLogin() {
            this.Url = "https://brkir165v.ar.arcelik/WebServices/OperatorLogin.svc";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event StartSessionCompletedEventHandler StartSessionCompleted;
        
        /// <remarks/>
        public event StartSessionWeldingsCompletedEventHandler StartSessionWeldingsCompleted;
        
        /// <remarks/>
        public event CloseSessionCompletedEventHandler CloseSessionCompleted;
        
        /// <remarks/>
        public event GetStationStatusCompletedEventHandler GetStationStatusCompleted;
        
        /// <remarks/>
        public event GetUserStatusCompletedEventHandler GetUserStatusCompleted;
        
        /// <remarks/>
        public event HasAccessCompletedEventHandler HasAccessCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/StartSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StartSession(int Line, [System.Xml.Serialization.XmlIgnoreAttribute()] bool LineSpecified, int StationNumber, [System.Xml.Serialization.XmlIgnoreAttribute()] bool StationNumberSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string OperatorBR) {
            object[] results = this.Invoke("StartSession", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified,
                        OperatorBR});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartSessionAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, string OperatorBR) {
            this.StartSessionAsync(Line, LineSpecified, StationNumber, StationNumberSpecified, OperatorBR, null);
        }
        
        /// <remarks/>
        public void StartSessionAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, string OperatorBR, object userState) {
            if ((this.StartSessionOperationCompleted == null)) {
                this.StartSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartSessionOperationCompleted);
            }
            this.InvokeAsync("StartSession", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified,
                        OperatorBR}, this.StartSessionOperationCompleted, userState);
        }
        
        private void OnStartSessionOperationCompleted(object arg) {
            if ((this.StartSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartSessionCompleted(this, new StartSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/StartSessionWeldings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StartSessionWeldings(int Line, [System.Xml.Serialization.XmlIgnoreAttribute()] bool LineSpecified, int StationNumber, [System.Xml.Serialization.XmlIgnoreAttribute()] bool StationNumberSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string OperatorBR, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string WeldingPoints) {
            object[] results = this.Invoke("StartSessionWeldings", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified,
                        OperatorBR,
                        WeldingPoints});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartSessionWeldingsAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, string OperatorBR, string WeldingPoints) {
            this.StartSessionWeldingsAsync(Line, LineSpecified, StationNumber, StationNumberSpecified, OperatorBR, WeldingPoints, null);
        }
        
        /// <remarks/>
        public void StartSessionWeldingsAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, string OperatorBR, string WeldingPoints, object userState) {
            if ((this.StartSessionWeldingsOperationCompleted == null)) {
                this.StartSessionWeldingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartSessionWeldingsOperationCompleted);
            }
            this.InvokeAsync("StartSessionWeldings", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified,
                        OperatorBR,
                        WeldingPoints}, this.StartSessionWeldingsOperationCompleted, userState);
        }
        
        private void OnStartSessionWeldingsOperationCompleted(object arg) {
            if ((this.StartSessionWeldingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartSessionWeldingsCompleted(this, new StartSessionWeldingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/CloseSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CloseSession(int Line, [System.Xml.Serialization.XmlIgnoreAttribute()] bool LineSpecified, int StationNumber, [System.Xml.Serialization.XmlIgnoreAttribute()] bool StationNumberSpecified) {
            object[] results = this.Invoke("CloseSession", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CloseSessionAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified) {
            this.CloseSessionAsync(Line, LineSpecified, StationNumber, StationNumberSpecified, null);
        }
        
        /// <remarks/>
        public void CloseSessionAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, object userState) {
            if ((this.CloseSessionOperationCompleted == null)) {
                this.CloseSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseSessionOperationCompleted);
            }
            this.InvokeAsync("CloseSession", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified}, this.CloseSessionOperationCompleted, userState);
        }
        
        private void OnCloseSessionOperationCompleted(object arg) {
            if ((this.CloseSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseSessionCompleted(this, new CloseSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/GetStationStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public StationInfo GetStationStatus(int Line, [System.Xml.Serialization.XmlIgnoreAttribute()] bool LineSpecified, int StationNumber, [System.Xml.Serialization.XmlIgnoreAttribute()] bool StationNumberSpecified) {
            object[] results = this.Invoke("GetStationStatus", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified});
            return ((StationInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetStationStatusAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified) {
            this.GetStationStatusAsync(Line, LineSpecified, StationNumber, StationNumberSpecified, null);
        }
        
        /// <remarks/>
        public void GetStationStatusAsync(int Line, bool LineSpecified, int StationNumber, bool StationNumberSpecified, object userState) {
            if ((this.GetStationStatusOperationCompleted == null)) {
                this.GetStationStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStationStatusOperationCompleted);
            }
            this.InvokeAsync("GetStationStatus", new object[] {
                        Line,
                        LineSpecified,
                        StationNumber,
                        StationNumberSpecified}, this.GetStationStatusOperationCompleted, userState);
        }
        
        private void OnGetStationStatusOperationCompleted(object arg) {
            if ((this.GetStationStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStationStatusCompleted(this, new GetStationStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/GetUserStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public StationInfo GetUserStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string OperatorBR) {
            object[] results = this.Invoke("GetUserStatus", new object[] {
                        OperatorBR});
            return ((StationInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserStatusAsync(string OperatorBR) {
            this.GetUserStatusAsync(OperatorBR, null);
        }
        
        /// <remarks/>
        public void GetUserStatusAsync(string OperatorBR, object userState) {
            if ((this.GetUserStatusOperationCompleted == null)) {
                this.GetUserStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserStatusOperationCompleted);
            }
            this.InvokeAsync("GetUserStatus", new object[] {
                        OperatorBR}, this.GetUserStatusOperationCompleted, userState);
        }
        
        private void OnGetUserStatusOperationCompleted(object arg) {
            if ((this.GetUserStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserStatusCompleted(this, new GetUserStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IOperatorLogin/HasAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string HasAccess(int line, [System.Xml.Serialization.XmlIgnoreAttribute()] bool lineSpecified, int station, [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string operatorBR) {
            object[] results = this.Invoke("HasAccess", new object[] {
                        line,
                        lineSpecified,
                        station,
                        stationSpecified,
                        operatorBR});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HasAccessAsync(int line, bool lineSpecified, int station, bool stationSpecified, string operatorBR) {
            this.HasAccessAsync(line, lineSpecified, station, stationSpecified, operatorBR, null);
        }
        
        /// <remarks/>
        public void HasAccessAsync(int line, bool lineSpecified, int station, bool stationSpecified, string operatorBR, object userState) {
            if ((this.HasAccessOperationCompleted == null)) {
                this.HasAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasAccessOperationCompleted);
            }
            this.InvokeAsync("HasAccess", new object[] {
                        line,
                        lineSpecified,
                        station,
                        stationSpecified,
                        operatorBR}, this.HasAccessOperationCompleted, userState);
        }
        
        private void OnHasAccessOperationCompleted(object arg) {
            if ((this.HasAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasAccessCompleted(this, new HasAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/OperatorLoginWebS")]
    public partial class StationInfo {
        
        private string errorDetailField;
        
        private int lineField;
        
        private bool lineFieldSpecified;
        
        private System.DateTime loginTimeField;
        
        private bool loginTimeFieldSpecified;
        
        private string operatorBRField;
        
        private int stationNumberField;
        
        private bool stationNumberFieldSpecified;
        
        private string weldingPointsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ErrorDetail {
            get {
                return this.errorDetailField;
            }
            set {
                this.errorDetailField = value;
            }
        }
        
        /// <remarks/>
        public int Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineSpecified {
            get {
                return this.lineFieldSpecified;
            }
            set {
                this.lineFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LoginTime {
            get {
                return this.loginTimeField;
            }
            set {
                this.loginTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoginTimeSpecified {
            get {
                return this.loginTimeFieldSpecified;
            }
            set {
                this.loginTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OperatorBR {
            get {
                return this.operatorBRField;
            }
            set {
                this.operatorBRField = value;
            }
        }
        
        /// <remarks/>
        public int StationNumber {
            get {
                return this.stationNumberField;
            }
            set {
                this.stationNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StationNumberSpecified {
            get {
                return this.stationNumberFieldSpecified;
            }
            set {
                this.stationNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string WeldingPoints {
            get {
                return this.weldingPointsField;
            }
            set {
                this.weldingPointsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void StartSessionCompletedEventHandler(object sender, StartSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void StartSessionWeldingsCompletedEventHandler(object sender, StartSessionWeldingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartSessionWeldingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartSessionWeldingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CloseSessionCompletedEventHandler(object sender, CloseSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetStationStatusCompletedEventHandler(object sender, GetStationStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStationStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStationStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StationInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StationInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetUserStatusCompletedEventHandler(object sender, GetUserStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public StationInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((StationInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void HasAccessCompletedEventHandler(object sender, HasAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591